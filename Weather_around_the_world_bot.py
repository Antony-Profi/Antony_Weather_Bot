import requests
import datetime
from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from config_app_weather import weather_token, open_weather_token
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton


bot = Bot(token=weather_token)
dp = Dispatcher(bot)


async def start(_):
    print('–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')


HELP_COMMAND = """
<b>/start</b> - <em>–ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞</em>
<b>/vote</b> - <em>–ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –º—ã –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å</em>
<b>/help</b> - <em>–ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–º –≤—Å—ë –æ–±—ä—è—Å–Ω—è—Ç</em>
"""


menu = ReplyKeyboardMarkup(resize_keyboard=True)
button_1 = KeyboardButton(text='/help')
button_2 = KeyboardButton(text='/vote')
menu.add(button_1, button_2)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text='<b>–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!</b>',
                           reply_markup=menu,
                           parse_mode='HTML')

    ikb = InlineKeyboardMarkup(row_width=2)
    ib_1 = InlineKeyboardButton(text='üëç', callback_data='like')
    ib_2 = InlineKeyboardButton(text='üëé', callback_data='dislike')
    ikb.add(ib_1, ib_2)
    await bot.send_photo(chat_id=message.from_user.id,
                         photo='https://play.google.com/store/apps/details?id=com.weather.forcast.accurate.weatherlive&hl=ru',
                         caption='–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —ç—Ç–∞ —Ñ–æ—Ç–∫–∞?',
                         reply_markup=ikb)
    await message.delete()


@dp.message_handler(commands=['vote'])
async def vote_command(message: types.Message):
    ikb = InlineKeyboardMarkup(row_width=2)
    ib_1 = InlineKeyboardButton(text='üëç', callback_data='like')
    ib_2 = InlineKeyboardButton(text='üëé', callback_data='dislike')
    ikb.add(ib_1, ib_2)
    await bot.send_photo(chat_id=message.from_user.id,
                         photo='https://hips.hearstapps.com/hmg-prod/images/766/benefits-of-lemon-water-1517535074.jpg?crop=0.848xw:1xh;center,top&resize=1200:*',
                         caption='–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —ç—Ç–∞ —Ñ–æ—Ç–∫–∞?',
                         reply_markup=ikb)
    await message.delete()


@dp.callback_query_handler()
async def vote_callback(callback: types.CallbackQuery):
    if callback.data == 'like':
        await callback.answer(text='–£—Ä–∞! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –æ—Ü–µ–Ω–∏–ª!')
    await callback.answer(text='–ñ–∞–ª–∫–æ, —è —Å—Ç–∞—Ä–∞–ª—Å—è!')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer(text=HELP_COMMAND,
                         parse_mode='HTML')
    await message.delete()


@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smile = {
        'Clear': '–Ø—Å–Ω–æ \U00002600',
        'Clouds': '–û–±–ª–∞—á–Ω–æ \U00002601',
        'Rain': '–î–æ–∂–¥—å \U00002614',
        'Drizzle': '–î–æ–∂–¥—å \U00002614',
        'Thunderstorm': '–ì—Ä–æ–∑–∞ \U000026A1',
        'Snow': '–°–Ω–µ–≥ \U0001F328',
        'Mist': '–¢—É–º–∞–Ω \U0001F32B'
    }

    try:
        r = requests.get(
            f'http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric'
        )
        data = r.json()

        city = data['name']
        cur_weather = data['main']['temp']

        weather_description = data['weather'][0]['main']
        if weather_description in code_to_smile:
            wd = code_to_smile[weather_description]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞!'

        humidity = data['main']['humidity']
        temp_max = data['main']['temp_max']
        temp_min = data['main']['temp_min']
        pressure = data['main']['pressure']
        wind = data['wind']['speed']
        country = data['sys']['country']
        sunrise_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        length_of_the_day = datetime.datetime.fromtimestamp(data['sys']['sunset']) - datetime.datetime.fromtimestamp(
            data['sys']['sunrise'])

        await message.reply(f"<b>{datetime.datetime.now().strftime('–î–∞—Ç–∞: %Y-%m-%d  –í—Ä–µ–º—è: %H:%M:%S')}</b>\n"
              f'\n–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n'
              f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_max}\n'
              f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n'
              f'–í–µ—Ç–µ—Ä: {wind} –º/—Å\n–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã: {country}\n–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n'
              f'–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n'
              f'\n<b>              –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòé!</b>',
                            parse_mode='HTML'
              )

    except:
        await message.reply('\U0001F605 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U0001F605')


executor.start_polling(dispatcher=dp, on_startup=start, skip_updates=True)